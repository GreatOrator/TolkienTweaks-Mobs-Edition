buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        maven { url = "https://maven.minecraftforge.net/" }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:5.1.+'
    }
}

plugins {
    id 'java'
    id 'maven-publish'
    id "net.covers1624.signing" version '1.1.4'
}

apply plugin: 'net.minecraftforge.gradle'

group = "com.greatorator.tolkienmobs"
archivesBaseName = "TolkienMobs"

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

//Add generated resources to main resources.
sourceSets.main.resources.srcDirs += "src/generated/resources"

def signProps = [:]
if (System.getenv("KEY_STORE")) {
    println "Using Env variables for jar signing."
    signProps['keyStore'] = System.getenv("KEY_STORE")
    file(System.getenv("KEY_STORE_PROPS")).withReader {
        def props = new Properties()
        props.load(it)
        signProps.putAll(props)
    }
} else if (project.hasProperty('keyStore')) {
    println "Using Project properties for jar signing."
    signProps['keyStore'] = project.getProperty('keyStore')
    signProps['storePass'] = project.getProperty('keyStorePass')
    signProps['alias'] = project.getProperty('keyStoreAlias')
    signProps['keyPass'] = project.getProperty('keyStoreKeyPass')
} else {
    println 'No signing secrets found, build will not be signed.'
}

mod_version = "${mod_version}." + (System.getenv("BUILD_NUMBER") ?: "1")

version = "${mc_version}-${mod_version}"
group = 'com.greatorator'
archivesBaseName = "${mod_id}"

repositories {
    mavenLocal()
    maven { // Code Chicken Lib
        url = "https://maven.covers1624.net/"
    }
    maven { // Curios
        url = "https://maven.theillusivec4.top/"
    }
    maven { // JEI
        url = "https://dvs1.progwml6.com/files/maven"
    }
    maven { // Patchouli
        url 'https://maven.blamejared.com/'
    }
}

minecraft {
    mappings channel: 'official', version: mc_version
    accessTransformer = file("src/main/resources/META-INF/accesstransformer.cfg")
    runs {
        client {
            workingDirectory file('run')
            mods { tolkienmobs { source sourceSets.main } }
        }
        server {
            workingDirectory file('run')
            mods { tolkienmobs { source sourceSets.main } }
        }
        data {
            workingDirectory file('run')
            args '--mod', 'tolkienmobs', '--all', '--output', file("src/generated/resources"), '--existing', file("src/main/resources")
            mods { tolkienmobs { source sourceSets.main } }
        }
    }
}


dependencies {
    minecraft "net.minecraftforge:forge:${mc_version}-${forge_version}"

    implementation fg.deobf("codechicken:CodeChickenLib:${mc_version}-${ccl_version}:universal")
    implementation fg.deobf("mezz.jei:jei-${mc_version}:${jei_version}")
    implementation fg.deobf("top.theillusivec4.curios:curios-forge:${mc_version}-${curios_version}")
    implementation fg.deobf("vazkii.patchouli:Patchouli:${patchouli_version}")
    implementation fg.deobf("com.brandon3055.brandonscore:BrandonsCore:${mc_version}-${bcore_version}:universal")
    implementation fg.deobf("slimeknights.mantle:Mantle:${mc_version}-${mantle_version}")
    implementation fg.deobf("slimeknights.tconstruct:TConstruct:${mc_version}-${tcon_version}")

}

signing {
    if (!signProps.isEmpty()) {
        jars {
            sign jar
            after reobfJar

            keyStore = signProps.keyStore
            alias = signProps.alias
            storePass = signProps.storePass
            keyPass = signProps.keyPass
        }
    }
}

jar {
    manifest {
        attributes([
                'Specification-Title'     : "${mod_name}",
                'Specification-Vendor'    : 'GreatOrator',
                'Specification-Version'   : "${mc_version}",
                'Implementation-Title'    : "${mod_id}",
                'Implementation-Vendor'   : 'GreatOrator',
                'Implementation-Version'  : "${mod_version}",
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

task srcJar(type: Jar) {
    build.dependsOn it
    from sourceSets.main.allSource
    classifier = 'sources'
}

publishing {
    repositories {
        if (System.getenv('MAVEN_PASS')) {
            maven {
                url "https://maven-upload.covers1624.net/"
                credentials {
                    username 'covers1624'
                    password System.getenv('MAVEN_PASS')
                }
            }
        }
    }
    publications {
        TolkienMobs(MavenPublication) {
            groupId project.group
            artifactId project.archivesBaseName
            version project.version
            artifact jar
            artifact srcJar

            pom {
                name = archivesBaseName
                description = archivesBaseName
                //The publish plugin doesn't like GString's here apparently..
                url = "https://github.com/GreatOrator/TolkienTweaks-Mobs".toString()
                scm {
                    url = "https://github.com/GreatOrator/TolkienTweaks-Mobs".toString()
                    connection = "scm:git:git://github.com/GreatOrator/TolkienTweaks-Mobs.git".toString()
                    connection = "scm:git:git@github.com:GreatOrator/TolkienTweaks-Mobs.git".toString()
                }

                issueManagement {
                    system = 'github'
                    url = "https://github.com/GreatOrator/TolkienTweaks-Mobs/issues".toString()
                }
                licenses {
                    license {
                        name = "MIT License"
                        url = "https://github.com/GreatOrator/TolkienTweaks-Mobs/blob/master/LICENSE"
                        distribution = 'Repo'
                    }
                }
                developers {
                    developer {
                        id = 'GreatOrator'
                        name = 'GreatOrator'
                    }
                }
            }
        }
    }
}


/**
 * Polls the 'compile' configuration for a dependency with the given module name
 * and resolves, and returns its version. E.g: '1.2.+' will resolve to '1.2.3.4'
 *
 * @param module The module to search for.
 * @param chop If the string should be chopped on the last '-' in its string.
 * @param configuration The name of the configuration to search.
 * @param errorMissing If an error should be thrown if it can't be found.
 * @return The version string, '0' if 'errorMissing' is false and nothing was found.
 */
def resolve(module, chop = true, configuration = 'compile', errorMissing = true) {
    //Copy and lenient resolve the configuration, Forge cant be resolved at this time so lenient is required.
    def filtered = configurations.getByName(configuration).copy().incoming.artifactView({ it.lenient = true }).artifacts
            .findAll { it.id.componentIdentifier.module == module }
            .collect { it.id.componentIdentifier.version }
    if (filtered.size() > 1) {
        println "WARNING: Found ${filtered.size()} Dependencies with ModuleName '${module}' in configuration '${configuration.name}'"
    }
    if (errorMissing && filtered.isEmpty()) {
        throw new RuntimeException("Failed resolve dependency version for '${module}'")
    }
    if (filtered.isEmpty()) return "0"
    def version = filtered.first() as String
    if (chop) {
        def idx = version.lastIndexOf('-')
        return version.substring(idx + 1)
    }
    return version
}